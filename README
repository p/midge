        Midge - a simple bug powerfully bug tracking system

   Copyright(C) 2003 Timothy Corbett-Clark <tcorbettclark@users.sf.net>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   For more details see the file COPYING.


Requirements
============
 
Midge has been developed and tested with the following software
(earlier versions may work):

   postgres-7.4.2
   psycopg-1.1.11
   python-2.3.3
   egenix-mx-base-2.0.4


Install
=======


 1) Adjust setup.py as required.

 2) Build:

      python setup.py build

 3) Install:

      sudo python set.py install

 4) Cleanup:

     python setup.up clean

 5) Test:

     midge-test

 6) Start:

     midged &

    (as an ordinary user)

 7) Point your browser to http://localhost:8000
    (or as per config file).


States
======

Approach:

  - Keep the number of states to a minimum so that the user can easily
    make queries, without accidentally missing bugs.

  - Don't have state values which are rarely used (e.g. use "new"
    again, rather than "reopened")

  - Keep states as orthogonal as possible. So for example, don't have
    a resolved category which is only relevent when the status is
    closed or fixed. Also don't allow multiple "fixed in versions" as
    this clashes with the status (use separate bugs linked through
    keywords).

  - Allow some states to have values dynamically decided by the user
    (and automatically cleaned up when unused).

  - All underlying tables (and separate user-enterable fields) are
    justified by the need for searching; do not store purely
    informative data in separate tables, and avoid the user needing to
    enter them using separate fields. For example, although it is
    useful to know which machine a bug occured on, it is most unlikely
    that one would need to search on this.

status
  new		a new unread (or reopened) bug
  reviewed	acknowledged useful entry, but don't fix yet
  scheduled     ready to be fixed now
  fixed  	believed fixed (or not a bug), but to be confirmed by testing
  closed	confirmed fixed (or not a bug)

  Note that all new bugs start as new. Typically, Managers take new to
  reviewed or cancelled, and to scheduled if ready to fix; Developers
  take scheduled to fixed, tackling them in order of priority);
  Testers take fixed to closed, cancelled, or new.

*category
  Dynamically chosen by user (e.g. eDC, eDM, config, etc)

*reported in version
  Dynamically chosen by user (e.g. release_3-1, 2.8.3pre3)

*configuration
  Dynamically chosen by user (e.g. trial ID, demo)

priority
  A number from 1 to 5, where 5 is the most important. Note priority
  does not mean severity (and severity is indicated in the users text).

fixed in version
  Dynamically chosen by user (e.g. release_3-1, 2.8.2pre3).

tested ok in version
  Dynamically chosen by user (e.g. release_3-1, 2.8.2pre3)

keyword

  Dynamically chosen by the user, and allows bugs to be grouped
  (e.g. comms, release management). Note that this includes grouping
  duplicates (which should be closed off together). A bug can belong
  to more than one group. Note that "category" is simply a keyword in
  a separate namespace.


* items are asked on adding new bug.

Listings
========

all new bugs
  sort by priority
  -> bug id, priority category, title

all reviewed bugs
  sort by priority
  -> bug id, priority, category, title

all scheduled bugs
  sort by priority
  -> bug id, priority, category, reported in, title

all fixed bugs
  sort by fixed in
  -> bug id, priority, category, fixed in, title

all closed bugs
  sort by closed in
  -> bug id, priority, closed in, title
